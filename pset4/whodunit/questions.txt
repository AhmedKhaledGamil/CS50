1.  It helps using well defined types that makes the code easier for portability allowing only defined minimum and maximum allowable values for each type.
2.  So each type you want is defined the way want, also treated the way you want from the compiler. 
3.  BYTE = 1 byte, DWORD = 4 bytes, LONG = 4 bytes and WORD = 2 bytes.
4.  Hex: 0x424d and ASCII: BM (bitmap!).
5.  bfSize is the total number of bytes in the file and biSize is the number of bytes in the info header.
6.  For uncompressed RGB bitmaps, if biHeight is positive, the bitmap is a bottom-up DIB with the origin at the lower left corner. 
    If biHeight is negative, the bitmap is a top-down DIB with the origin at the upper left corner.
7.  biBitCount.
8.  If it can't find the file, it will.
9.  Because it specifies how many elements you want to read, and we're always reading a struct so we only need 1 struct.
10. Zero
11. It moves to a specific location in a file.
12. An integer constant which, when used as the 'whence' argument to the fseek or fseeko function, specifies that the offset provided is relative to
    the current file position.
